{"version":3,"sources":["utils/storage.js","store/action.js","store/reducer.js","store/store.js","components/List-Item/List-Item.js","components/Add-Item/Add.js","components/Pagination/Pagination.js","components/List/List.js","components/App.js","index.js"],"names":["get","key","localStorage","getItem","getObj","string","JSON","parse","e","set","value","setItem","setObj","stringify","FETCH_LIST","ADD_FRIEND","ADD_TO_FAVOURITE","DELETE_FRIEND","SEARCH_FRIEND","SORT","PAGINATE","ORDER","FRIENDS_LIST","LIST_ORDER","sort","order","list","x","y","fav","paginate","page","hasNextPage","hasPreviousPage","pageSize","start","end","length","paginatedList","slice","fetchList","state","store","getState","friends","sortedByFav","dispatch","type","data","initialState","createStore","combineReducers","action","composeWithDevTools","ListItem","props","friend","useState","deleting","setDeleting","className","name","onClick","friendToFav","find","f","id","addToFavourite","setTimeout","listWithoutFriend","filter","deleteFriend","Add","form","useRef","handleFormSubmit","preventDefault","push","addFriend","current","onSubmit","ref","onKeyDown","which","placeholder","connect","handlePageChange","dataPage","target","dataset","changePage","parseInt","data-page","useEffect","reOrder","map","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8603bc4a.chunk.js","sourcesContent":["export const get = (key) => {\n    return localStorage.getItem(key) || null;\n};\n\nexport const getObj = (key) => {\n    const string = get(key);\n    try {\n        const obj = JSON.parse(string);\n        return obj;\n    } catch (e) {\n        return {};\n    }\n};\n\nexport const set = (key, value) => {\n    return localStorage.setItem(key,value) || null;\n};\n\nexport const setObj = (key, value) => {\n    set(key, JSON.stringify(value));\n};\n","import store from \"./store\";\nimport { getObj, setObj, set, get } from \"../utils/storage\";\n\nexport const FETCH_LIST = \"FETCH_LIST\";\nexport const ADD_FRIEND = \"ADD_FRIEND\";\nexport const ADD_TO_FAVOURITE = \"ADD_TO_FAVOURITE\";\nexport const DELETE_FRIEND = \"DELETE_FRIEND\";\nexport const SEARCH_FRIEND = \"SEARCH_FRIEND\";\nexport const SORT = \"SORT\";\nexport const PAGINATE = \"PAGINATE\";\n\nexport const ORDER = {\n    FAV: \"FAV\",\n    N_FAV: \"N_FAV\",\n};\n\nexport const FRIENDS_LIST = \"FRIENDS_LIST\";\nexport const LIST_ORDER = \"LIST_ORDER\";\nexport const PAGE = \"PAGE\";\n\nconst sort = (order, list) => {\n    return list.sort((x, y) => {\n        if (order === ORDER.N_FAV) {\n            return x.fav > y.fav ? 1 : -1;\n        }\n        return y.fav > x.fav ? 1 : -1;\n    });\n};\n\nconst paginate = (page = 1, list = []) => {\n    const hasNextPage = false;\n    const hasPreviousPage = false;\n    const pageSize = 4;\n    const start = (page - 1) * pageSize;\n    const end = start + pageSize;\n\n    // console.log({ page, start, end });\n\n    if (list.length < pageSize) {\n        return {\n            hasPreviousPage,\n            hasNextPage,\n            paginatedList: list,\n        };\n    }\n\n    const paginatedList = list.slice(start, end);\n    return {\n        hasPreviousPage: page > 1,\n        hasNextPage: list.length > end,\n        paginatedList,\n    };\n};\n\nexport const fetchList = (type = FETCH_LIST) => {\n    let state = store.getState();\n    const {\n        friends: { page, order },\n    } = state;\n    const list = getObj(FRIENDS_LIST) || [];\n    const sortedByFav = sort(order, list);\n    const { hasNextPage, hasPreviousPage, paginatedList } = paginate(page, sortedByFav);\n    store.dispatch({ type: FETCH_LIST, data: { list: sortedByFav, paginatedList, hasNextPage, hasPreviousPage, page: 1 } });\n};\n\nexport const addFriend = (friend) => {\n    const list = getObj(FRIENDS_LIST) || [];\n    list.push({ name: friend, fav: false, id: list.length + 1 });\n    setObj(FRIENDS_LIST, list);\n    fetchList(ADD_FRIEND);\n    // store.dispatch({ type: ADD_FRIEND, data: { list: list } });\n};\n\nexport const addToFavourite = (friend) => {\n    const list = getObj(FRIENDS_LIST) || [];\n    const friendToFav = list.find((f) => f.id === friend.id);\n    friendToFav.fav = !friendToFav.fav;\n    setObj(FRIENDS_LIST, list);\n    store.dispatch({ type: ADD_TO_FAVOURITE, data: { list: list } });\n};\n\nexport const deleteFriend = (friend) => {\n    const list = getObj(FRIENDS_LIST) || [];\n    const listWithoutFriend = list.filter((f) => f.id !== friend.id);\n    setObj(FRIENDS_LIST, listWithoutFriend);\n    fetchList(FRIENDS_LIST);\n    // store.dispatch({ type: DELETE_FRIEND, data: { list: listWithoutFriend } });\n};\n\nexport const reOrder = () => {\n    let state = store.getState();\n    let order;\n    if (state.friends.order === ORDER.FAV) {\n        order = ORDER.N_FAV;\n    } else {\n        order = ORDER.FAV;\n    }\n    const list = getObj(FRIENDS_LIST) || [];\n    const sortedByFav = sort(order, list);\n    setObj(FRIENDS_LIST, sortedByFav);\n    set(LIST_ORDER, order);\n    store.dispatch({ type: SORT, data: { order, page: 1 } });\n    fetchList();\n};\n\nexport const changePage = (page) => {\n    if (page <= 0) {\n        return;\n    }\n    const list = getObj(FRIENDS_LIST) || [];\n    const order = get(LIST_ORDER);\n    const sortedByFav = sort(order, list);\n    const { hasNextPage, hasPreviousPage, paginatedList } = paginate(page, sortedByFav);\n    store.dispatch({ type: PAGINATE, data: { page, hasNextPage, hasPreviousPage, paginatedList } });\n};\n\nexport const searchFriend = (friend) => {\n    // const searchedFriend = get(friend.id);\n    // store.dispatch({ type: SEARCH_FRIEND, data: searchedFriend });\n};\n","import { FETCH_LIST, ADD_FRIEND, ADD_TO_FAVOURITE, DELETE_FRIEND, SEARCH_FRIEND, SORT, ORDER, LIST_ORDER, PAGE, PAGINATE } from \"./action\";\nimport { get } from \"../utils/storage\";\nconst initialState = {\n    list: [],\n    paginatedList: [],\n    page: get(PAGE) || 1,\n    hasNextPage: false,\n    hasPreviousPage: false,\n    order: get(LIST_ORDER) || ORDER.N_FAV,\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case FETCH_LIST:\n        case ADD_FRIEND:\n        case ADD_TO_FAVOURITE:\n        case DELETE_FRIEND:\n        case SEARCH_FRIEND:\n        case PAGINATE:\n        case SORT:\n            return {\n                ...state,\n                ...action.data,\n                list: action.data.list,\n            };\n        default:\n            return state;\n    }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from \"./reducer\";\n\nconst store = createStore(\n    combineReducers({\n        friends: rootReducer,\n    }),\n    composeWithDevTools()\n);\n\nexport default store;\n","import React, { useState } from \"react\";\nimport { addToFavourite, deleteFriend } from \"../../store/action\";\n\nconst ListItem = (props) => {\n    const { friend } = props;\n    const [deleting, setDeleting] = useState(false);\n    const handleAddToFav = () => {\n        addToFavourite(friend);\n    };\n\n    const handleDelete = () => {\n        setDeleting(true);\n        setTimeout(() => {\n            deleteFriend(friend);\n        }, 1000);\n    };\n    return (\n        <div className=\"list-item-container\">\n            <div className=\"name\">{friend.name}</div>\n            <div className=\"actions\">\n                <span className=\"action\" onClick={handleAddToFav}>{friend.fav ? \"⭐\" : \"☆\"}</span>\n                <span className=\"action\" onClick={handleDelete}>{deleting ? \"🥺\" : \"🗑️\"}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default ListItem;\n","import React, { useRef } from \"react\";\nimport { addFriend } from \"../../store/action\";\n\nconst Add = () => {\n    const form = useRef(null);\n    const handleKeyDown = (e) => {\n        if (e.which === \"13\" && e.key === \"Enter\") {\n            handleFormSubmit(e);\n        }\n    };\n\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n        const name = form.current.name.value;\n        addFriend(name)\n        form.current.name.value = \"\";\n    };\n    return (\n        <form className=\"form\" onSubmit={handleFormSubmit} ref={form}>\n            <input type=\"text\" className=\"input\" name=\"name\" onKeyDown={handleKeyDown} placeholder=\"Enter your friend's name\" />\n        </form>\n    );\n};\n\nexport default Add;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { changePage } from \"../../store/action\";\n\nconst Pagination = (props) => {\n    const page = props.friends.page;\n\n    const handlePageChange = (e) => {\n        const dataPage = e.target.dataset.page;\n        const nextPage = parseInt(dataPage) + page;\n        // console.log({ nextPage });\n        changePage(nextPage);\n    };\n    return (\n        <div className=\"pagination-container\">\n            {props.friends.hasPreviousPage && (\n                <span className=\"arrow left\" onClick={handlePageChange} data-page=\"-1\">\n                    ◀\n                </span>\n            )}\n            {props.friends.hasNextPage && (\n                <span className=\"arrow right\" onClick={handlePageChange} data-page=\"1\">\n                    ▶\n                </span>\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    friends: state.friends,\n});\n\nexport default connect(mapStateToProps, {})(Pagination);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Item from \"./../List-Item/List-Item\";\nimport { fetchList, reOrder } from \"../../store/action\";\nimport Add from \"./../Add-Item/Add\";\nimport Pagination from \"./../Pagination/Pagination\";\n\nconst List = (props) => {\n    const { friends } = props;\n    useEffect(() => {\n        fetchList();\n    }, []);\n\n    const handleSort = () => {\n        reOrder();\n    };\n\n    return (\n        <div className=\"list-container\">\n            <div className=\"heading\">\n                <span>Friends List</span>\n                <span className=\"actions\" onClick={handleSort}>⭐</span>\n            </div>\n            <Add />\n            {friends.paginatedList.map((friend) => {\n                return <Item key={friend.id} friend={friend} />;\n            })}\n            <Pagination />\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    friends: state.friends,\n});\n\nexport default connect(mapStateToProps, { fetchList })(List);\n","import { Provider } from \"react-redux\";\nimport store from \"./../store/store\";\n\nimport \"./App.css\";\n\nimport List from \"./List/List\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"App-container\">\n                <div className=\"App\">\n                    <List />\n                </div>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}